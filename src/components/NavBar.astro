---
import { type MenuItemDefinition, Hamburger, MainMenu, DefaultSettings } from '@pbkware/astro-main-menu';

const base = import.meta.env.BASE_URL;

const menuItemDefinitions: MenuItemDefinition[] = [
    { text: 'Home', url: base },
    {
        text: 'Libraries',
        children: [
            { text: 'C#', url: `${base}c-sharp-library/` },
            { text: 'Delphi', url: `${base}delphi-library/` },
        ],
    },
    {
        text: 'Apps',
        children: [
            { text: 'FTEditor', url: `${base}fteditor/` },
            { text: 'FTValid', url: `${base}ftvalid/` },
        ],
    },
];
---

<nav class="navbar">
    <div class="navbar-narrow-left">
    </div>

    <div class="navbar-wide-left">
    </div>

    <MainMenu settings={DefaultSettings.mainMenuSettings}, menuItemDefinitions={menuItemDefinitions} />

    <div class="narrow-heading">
        <slot name="narrow-heading" />
    </div>

    <div class="navbar-wide-right">
        <div class="navbar-wide-right-icon">
        </div>
        <Hamburger settings={DefaultSettings.hamburgerSettings} />
    </div>
</nav>

<style lang="scss" define:vars={{
    wideNavBarBackgroundColor: DefaultSettings.wideMenuBackgroundColor,
    hamburgerWidth: DefaultSettings.hamburgerSettings.width,
}}>
    @use '/src/styles/scss/main-menu-config'; // Sass is only used to to allow media breakpoint to be specified by a variable.  Otherwise rest of style is plain CSS.

    .navbar {
        width: 100%;
        background-color: var(--wideNavBarBackgroundColor, #d0dae0);
        margin: 0;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: space-between;

        > .narrow-heading {
            display: none;
        }

        > .navbar-narrow-left {
            width: var(--hamburgerWidth, 1.8em);
            display: none;
        }

        > .navbar-wide-left {
            display: flex;
            align-items: center;
            flex: 0 0 auto;
        }

        > .navbar-wide-right {
            display: flex;
            align-items: center;
            flex: 0 0 auto;
        }

        [data-icon="noun-comma-separated-value-1512118"] {
            color: gray;
            /* OR */
            fill: gray;
        }

        @media screen and ((hover: none) or (width < main-menu-config.$narrow-breakpoint)) {
            > .narrow-heading {
                display: flex;
                align-items: center;
            }

            > .navbar-narrow-left {
                display: flex;
                align-items: center;
            }

            > .navbar-wide-left {
                display: none;
            }

            > .navbar-wide-right {
                width: var(--hamburgerWidth, 1.8em);

                > .navbar-wide-right-icon {
                    display: none;
                }
            }
        }
    }
</style>

<script>
    import { MenuClickProcessor } from '@pbkware/astro-main-menu';
    const processor = MenuClickProcessor.get(); // This always needs to be called however only need processor if want to handle dataClick event

    // Handle dataClick event.
    processor.dataClickEventer = (_element, id, data) => {
        if (id === 'alert') {
            setTimeout(() => alert(data), 0);
            return true; // Indicate event was handled.
        } else {
            return false; // Indicate event not handled.  processor will then try and navigate to URL
        }
    }

    // Hide narrow menu and hamburger if document is clicked outside menu
    document.addEventListener('click', (event) => {
        const target = event.target;
        if (target === null || !processor.isClickHandledEventTarget(target)) {
            processor.deactivateNarrow();
        }
    });
</script>
